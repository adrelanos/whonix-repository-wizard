#!/usr/bin/python

from PyQt4 import QtCore, QtGui
from subprocess import call
import os, inspect
import locale, yaml


DEFAULT_LANG = 'en'

class GUI_message(QtGui.QMessageBox):
    def __init__(self):
        super(GUI_message, self).__init__()
        self.initUI()

    def initUI(self):
        self.setWindowIcon(QtGui.QIcon("/usr/share/icons/anon-icon-pack/whonix.ico"))
        self.setIcon(QtGui.QMessageBox.Critical)
        self.setWindowTitle('Whonix Repository Wizard')
        self.setStandardButtons(QtGui.QMessageBox.Ok)
        message = 'ERROR: This must be run as root!\n\nUse "kdesudo" in terminal or a root file manager.'
        self.setText(message)
        self.exec_()


class Whonix_repository_Wizard(QtGui.QWizard):
    def __init__(self):
        super(Whonix_repository_Wizard, self).__init__()

        # credits to nrgaway.
        try:
            language = DEFAULT_LANG
            language = locale.getdefaultlocale()[0].split('_')[0]
            if language:
                self.language = language
            translations = '/usr/share/whonix/whonix-shared-translations'
            stream = file(translations, 'r')
            self.data = yaml.load(stream)

        except IOError:
            # TODO Add code here.
            pass

        self.setupUi()

    def setupUi(self):
        self.resize(470, 310)
        self.setWindowTitle('Whonix Repository Wizard')
        icon = "/usr/share/icons/anon-icon-pack/whonix.ico"
        self.setWindowIcon(QtGui.QIcon(icon))

        self.pageEnable = QtGui.QWizardPage()
        self.enableText = QtGui.QLabel(self.pageEnable)
        self.enableText.setGeometry(QtCore.QRect(10, 10, 445, 150))
        self.enableText.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.enableText.setWordWrap(True)
        self.enableGroup = QtGui.QGroupBox(self.pageEnable)
        self.enableGroup.setGeometry(QtCore.QRect(10, 180, 445, 60))
        self.enableButton = QtGui.QRadioButton(self.enableGroup)
        self.enableButton.setGeometry(QtCore.QRect(30, 10, 400, 21))
        self.enableButton.setChecked(True)
        self.disableButton = QtGui.QRadioButton(self.enableGroup)
        self.disableButton.setGeometry(QtCore.QRect(30, 30, 300, 21))
        self.addPage(self.pageEnable)

        self.pageRepos = QtGui.QWizardPage()
        self.repoText = QtGui.QLabel(self.pageRepos)
        self.repoText.setGeometry(QtCore.QRect(10, 10, 430, 140))
        self.repoText.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.repoText.setWordWrap(True)
        self.repoGroup = QtGui.QGroupBox(self.pageRepos)
        self.repoGroup.setGeometry(QtCore.QRect(10, 150, 445, 90))
        self.repo1 = QtGui.QRadioButton(self.repoGroup)
        self.repo1.setGeometry(QtCore.QRect(30, 20, 300, 21))
        self.repo1.setChecked(True)
        self.repo2 = QtGui.QRadioButton(self.repoGroup)
        self.repo2.setGeometry(QtCore.QRect(30, 40, 300, 21))
        self.repo3 = QtGui.QRadioButton(self.repoGroup)
        self.repo3.setGeometry(QtCore.QRect(30, 60, 300, 21))
        self.addPage(self.pageRepos)

        self.pageFinish = QtGui.QWizardPage()
        self.finishText = QtGui.QLabel(self.pageFinish)
        self.finishText.setGeometry(QtCore.QRect(10, 10, 445, 140))
        self.finishText.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.finishText.setWordWrap(True)
        self.addPage(self.pageFinish)

        try:
            section = self.data['whonix_repository']
            language = section.get(self.language, DEFAULT_LANG)
            message = language.get('enabletext', None)
            self.enableText.setText(message)
            message = language.get('disabletext', None)
            self.repoText.setText(message)
            message = language.get('enablebutton_text', None)
            self.enableButton.setText(message)
            message = language.get('disablebutton_text', None)
            self.disableButton.setText(message)
            message = language.get('finish_enabled', None)
            self.finish_text_disabled = message
            message = language.get('finish_disabed', None)
            self.finish_text_enabled = message
            message = language.get('finish_failed', None)
            self.finish_text_failed = message

        except (yaml.scanner.ScannerError, yaml.parser.ParserError):
            # TODO Add code here.
            pass

        self.repoGroup.setTitle("Repository")
        self.repo1.setText("Whonix Stable Repository")
        self.repo2.setText("Whonix Testers Repository")
        self.repo3.setText("Whonix Developers Repository")

        # The event handler polls nextId() several times for the same page.
        # Send command once only.
        self.oneShot = True

        self.button(QtGui.QWizard.BackButton).clicked.connect(self.BackButton_clicked)

        self.exec_()

    # re-arm command.
    def BackButton_clicked(self):
        if not self.oneShot:
            self.oneShot = True

    # overload QWizard.nextId()
    def nextId(self):
        if self.currentId() < 2:
            if self.enableButton.isChecked():
                return self.currentId() + 1
            elif self.disableButton.isChecked():
                if self.oneShot:
                    command = 'whonix_repository --disable'
                    exit_code = call(command, shell=True)
                    mypath = inspect.getfile(inspect.currentframe())
                    if exit_code == 0:
                        self.finishText.setText(self.finish_text_disabled)
                        message = 'INFO %s: Ok, exit code of "%s" was %s.' % ( mypath, command, exit_code )
                    else:
                        error = '<p>ERROR %s: exit code of \"%s\" was %s.</p>' % ( mypath, command, exit_code )
                        finish_text_failed =  error + self.finish_text_failed
                        self.finishText.setText(finish_text_failed)
                        message = error
                    command = 'echo ' + message
                    call(command, shell=True)
                    self.oneShot = False
                return self.currentId() + 2
        elif self.currentId() == 2:
            if self.repo1.isChecked():
                codename = ' --codename stable'
            elif self.repo2.isChecked():
                codename = ' --codename testers'
            elif self.repo3.isChecked():
                codename = ' --codename developers'
            if self.oneShot:
                command = 'whonix_repository --enable' + codename
                exit_code = call(command, shell=True)
                mypath = inspect.getfile(inspect.currentframe())
                if exit_code == 0:
                    self.finishText.setText(self.finish_text_enabled)
                    message = "INFO %s: Ok, exit code of \"%s\" was %s." % ( mypath, command, exit_code )
                else:
                    error = '<p>ERROR %s: exit code of \"%s\" was %s.</p>' % ( mypath, command, exit_code )
                    finish_text_failed =  error + self.finish_text_failed
                    self.finishText.setText(finish_text_failed)
                    message = error
                command = 'echo ' + message
                call(command, shell=True)
                self.oneShot = False
            return -1
        else:
            return -1


if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)

    # root check.
    if os.getuid() != 0:
        print 'ERROR: This must be run as root!\nUse "kdesudo".'
        not_root = GUI_message()
        sys.exit(1)

    wizard = Whonix_repository_Wizard()

    sys.exit()
